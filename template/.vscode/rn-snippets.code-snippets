{
  // Place your MClub workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}'$0"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportDestructingDefault": {
    "prefix": "exdd",
    "body": "export { default } from '${1:module}'$0"
  },
  "exportDefault": {
    "prefix": "exp",
    "body": "export default $1$0"
  },
  "exportDestructing": {
    "prefix": "exd",
    "body": "export { $2 } from '${1:module}'$0"
  },
  "exportAs": {
    "prefix": "exa",
    "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": [
      "export const ${1:functionName} = (${2:params}) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Export named function in ES7 syntax"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": [
      "export default (${1:params}) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Export default function in ES7 syntax"
  },
  "forEach": {
    "prefix": "fre",
    "body": [
      "${1:array}.forEach(${2:currentItem} => {",
      "\t${0}",
      "})",
      ""
    ],
    "description": "Creates a forEach statement in ES7 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": [
      "for(let ${1:item} of ${2:object}) {",
      "\t${0}",
      "}",
      ""
    ],
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": [
      "for(let ${1:item} in ${2:object}) {",
      "\t${0}",
      "}",
      ""
    ],
    "description": "Iterating over property values of iterable objects"
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": [
      "(${1:params}) => {",
      "\t${2}",
      "}",
      ""
    ],
    "description": "Creates an anonymous function in ES7 syntax"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": [
      "const ${1:name} = (${2:params}) => {",
      "\t${3}",
      "}",
      ""
    ],
    "description": "Creates a named function in ES7 syntax"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${1:propertyName}} = ${2:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${1:propertyName}] = ${2:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "setInterval": {
    "prefix": "sti",
    "body": [
      "setInterval(() => {",
      "\t${2}",
      "}, ${0:intervalInms})",
      ""
    ],
    "description": "Executes the given function at specified intervals in ES7 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": [
      "setTimeout(() => {",
      "\t${2}",
      "}, ${1:delayInms})",
      ""
    ],
    "description": "Executes the given function after the specified delay in ES7 syntax"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object})",
    "description": "Displays a message in the console"
  },
  "consoleTime": {
    "prefix": "ctm",
    "body": "console.time('${1:object}')",
    "description": "Console time wrapper"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd('${1:object}')",
    "description": "Console time end wrapper"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "import { memo }": {
    "prefix": "imrm",
    "body": [
      "import { memo } from 'react'",
      ""
    ]
  },
  "Create style": {
    "prefix": "rns",
    "body": [
      "const styles = ${1:StyleSheet}.create({",
      "${2}",
      "})"
    ]
  },
  "Export style": {
    "prefix": "rnse",
    "body": [
      "export const styles = ${1:StyleSheet}.create({",
      "${2}",
      "})"
    ]
  },
  "Hook, memo": {
    "prefix": "rnhm",
    "body": [
      "import { memo } from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "const ${1:${TM_FILENAME_BASE}}Component = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text></Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = memo(${1:${TM_FILENAME_BASE}}Component,${2:isEqual})"
    ]
  },
  "Hook, memo , style ": {
    "prefix": "rnhms",
    "body": [
      "import { memo } from 'react'",
      "import { View, Text, StyleSheet } from 'react-native'",
      "",
      "const styles = StyleSheet.create({",
      "",
      "});",
      "",
      "const ${1:${TM_FILENAME_BASE}}Component = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text></Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = memo(${1:${TM_FILENAME_BASE}}Component,${2:isEqual})"
    ]
  },
  "React, Typescript, Hook, memo, interface  ": {
    "prefix": "rthm",
    "body": [
      "import { memo } from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}}Component = ({}:${1:${TM_FILENAME_BASE}}Props) => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text></Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = memo(${1:${TM_FILENAME_BASE}}Component,${2:isEqual})"
    ]
  },
  "React, Typescript, Hook, memo, type, navigation  ": {
    "prefix": "rtnhm",
    "body": [
      "import React, { memo } from 'react'",
      "import { View, Text } from 'react-native'",
      "import {  StackScreenProps } from '@react-navigation/stack'",
      "",
      "type ${1:${TM_FILENAME_BASE}}Props = StackScreenProps<${3},${4}>",
      "",
      "const ${1:${TM_FILENAME_BASE}}Component = ({ navigation, route }:${1:${TM_FILENAME_BASE}}Props) => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text></Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = memo(${1:${TM_FILENAME_BASE}}Component,${2:isEqual})"
    ]
  },
  "React,Typescript, Hook, memo, interface, style  ": {
    "prefix": "rthms",
    "body": [
      "import { memo } from 'react'",
      "import { View, Text, StyleSheet } from 'react-native'",
      "",
      "const styles = StyleSheet.create({",
      "",
      "});",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}}Component = ({}:${1:${TM_FILENAME_BASE}}Props) => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text></Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = memo(${1:${TM_FILENAME_BASE}}Component,${2:isEqual})"
    ]
  },
  "Redux Constant": {
    "prefix": "rxconst",
    "body": [
      "export const ${1:CONSTANT_NAME} = '${1:CONSTANT_NAME}'"
    ]
  },
  "Redux Action": {
    "prefix": "rxaction",
    "body": [
      "export const ${1:actionName} = (payload) => ({",
      " type: ${2:type},",
      " payload",
      "})"
    ]
  },
  "Redux Reducer": {
    "prefix": "rxreducer",
    "body": [
      "const initialState = {",
      "",
      "}",
      "",
      "export default (state = initialState, { type, payload }) => {",
      "\tswitch (type) {",
      "",
      "\tcase ${1:typeName}:",
      "\t\treturn { ...state, ...payload }",
      "",
      "\tdefault:",
      "\t\treturn state",
      "\t}",
      "}"
    ]
  },
  "Redux Reducer Immer": {
    "prefix": "imreducer",
    "body": [
      "import { produce } from 'immer'",
      "import * as Action from '${1}';",
      "",
      "const initialState = {",
      "",
      "};",
      "export default",
      "\tproduce((draftState, { type, payload }) => {",
      "\t\tswitch (type) {",
      "\t\t\tdefault:",
      "\t\t\t\tbreak;",
      "\t\t}",
      "\t}, initialState)"
    ]
  },
  "Typescript Redux Reducer": {
    "prefix": "rxtreducer",
    "body": [
      "import * as Action from '${1}';",
      "",
      "interface ${2:${TM_FILENAME_BASE}}State {",
      "",
      "}",
      "",
      "const initialState: ${2:${TM_FILENAME_BASE}}State = {",
      "",
      "}",
      "",
      "interface ActionProps {",
      "\ttype: keyof typeof Action;",
      "\tpayload: any;",
      "}",
      "export default (state = initialState, { type, payload }: ActionProps): ${2:${TM_FILENAME_BASE}}State => {",
      "\tswitch (type) {",
      "",
      "\t\tcase ${3:typeName}:",
      "\t\t\treturn { ...state, ...payload }",
      "",
      "\t\tdefault:",
      "\t\t\treturn state",
      "\t}",
      "}"
    ]
  },
  "Typescript interface": {
    "prefix": "rni",
    "body": [
      "interface ${1:${TM_FILENAME_BASE}} {",
      "",
      "}"
    ]
  },
  "export Typescript interface": {
    "prefix": "exi",
    "body": [
      "export interface ${1:${TM_FILENAME_BASE}} {",
      "",
      "}"
    ]
  },
  "redux useSelector": {
    "prefix": "useSelector",
    "body": [
      "const {${2:state}} = useSelector(x => x.${1:state});"
    ]
  },
  "Typescript Redux useSelector": {
    "prefix": "tsuseSelector",
    "body": [
      "const {${3:state}} = useSelector<${1:any}>(x => x.${2:state});"
    ]
  },
  "redux useDispatch": {
    "prefix": "useDispatch",
    "body": [
      "const dispatch = useDispatch();"
    ]
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": [
      "useImperativeHandle(",
      "\tref,",
      "\t() => {",
      "\t\t${2:handler}",
      "\t},",
      "\t[${1:deps}],",
      ")"
    ]
  },
  "React hook state": {
    "prefix": "us",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ]
  },
  "Typescript React hook state": {
    "prefix": "tus",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:any}>(${3:initialState})"
    ]
  },
  "useEffect": {
    "prefix": "uef",
    "body": [
      "useEffect(() => {",
      "\t${2:effect}",
      "\treturn () => {",
      "\t\t${3:cleanup}",
      "\t}",
      "}, [${1:deps}])"
    ]
  },
  "useContext": {
    "prefix": "uc",
    "body": [
      "const ${1:context} = useContext(${2:contextValue})"
    ]
  },
  "useReducer": {
    "prefix": "ur",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ]
  },
  "useCallback": {
    "prefix": "ucbh",
    "body": [
      "const ${1:callback} = useCallback(() => {",
      "\t$3",
      "}, [${2:deps}]);"
    ]
  },
  "useMemo": {
    "prefix": "umm",
    "body": [
      "const ${1:memo} = useMemo(() => ${2:function}, [${3:deps}])"
    ]
  },
  "tuseMemo": {
    "prefix": "tumm",
    "body": [
      "const ${2:memo} = useMemo<${1:any}>(() => ${3:function}, [${4:deps}])"
    ]
  },
  "useRef": {
    "prefix": "ur",
    "body": [
      "const ${1:ref} = useRef(${2:initialValue})"
    ]
  },
  "Typescript useRef": {
    "prefix": "tur",
    "body": [
      "const ${2:ref} = useRef<${1:any}>(${3:initialValue})"
    ]
  },
  "useLayoutEffect": {
    "prefix": "ule",
    "body": [
      "useLayoutEffect(() => {",
      "\t${2:effect}",
      "\treturn () => {",
      "\t\t${2:cleanup}",
      "\t};",
      "}, [${1:input}])"
    ]
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": [
      "useDebugValue(${1:value})"
    ]
  },
  "reactNativeComponent": {
    "prefix": "rnc",
    "body": [
      "import { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ]
  },
  "reactNativeComponentWithStyles": {
    "prefix": "rncs",
    "body": [
      "import { Component } from 'react'",
      "import { Text, StyleSheet, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "reactNativeComponentExport": {
    "prefix": "rnce",
    "body": [
      "import { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactNativePureComponent": {
    "prefix": "rnpc",
    "body": [
      "import { PureComponent } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ]
  },
  "reactNativePureComponentExport": {
    "prefix": "rnpce",
    "body": [
      "import { PureComponent } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactNativeFunctionalExportComponent": {
    "prefix": "rnfe",
    "body": [
      "import { View, Text } from 'react-native'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactNativeFunctionalExportComponentWithStyles": {
    "prefix": "rnfes",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "reactNativeFunctionalComponent": {
    "prefix": "rnf",
    "body": [
      "import { View, Text } from 'react-native'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      ""
    ]
  },
  "reactNativeFunctionalComponentWithStyles": {
    "prefix": "rnfs",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "reactNativeImport": {
    "prefix": "imrn",
    "body": "import { ${1:moduleName} } from 'react-native'"
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": [
      "componentWillMount() {",
      "\t$0",
      "}",
      ""
    ],
    "description": "DEPRECATED!!!. Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": [
      "componentDidMount() {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": [
      "shouldComponentUpdate(nextProps, nextState) {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": [
      "componentWillUpdate(nextProps, nextState) {",
      "\t$0",
      "}",
      ""
    ],
    "description": "DEPRECATED!!!. Invoked immediately before rendering when new props or state are being received."
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": [
      "componentDidUpdate(prevProps, prevState) {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "custom_screen_reactNativeFunctionalComponentWithStyles": {
    "prefix": "srnfs",
    "body": [
      "import { Screen, Text } from '@components/index'",
      "import { ScaledSheet } from '@lib/react-native-size-matters'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<Screen>",
      "\t\t\t<Text />",
      "\t\t</Screen>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = ScaledSheet.create({",
      "\t",
      "})",
      ""
    ]
  },
  "custom_component_reactNativeFunctionalComponentWithStyles": {
    "prefix": "crnfs",
    "body": [
      "import { Box, Text } from '@components/index'",
      "import { ScaledSheet } from '@lib/react-native-size-matters'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<Box>",
      "\t\t\t<Text />",
      "\t\t</Box>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = ScaledSheet.create({",
      "\t",
      "})",
      ""
    ]
  },
  "scaleStyles": {
    "prefix": "css",
    "body": [
      "const styles = ScaledSheet.create({",
      "\t",
      "})",
      ""
    ]
  },
  "theme": {
    "prefix": "ut",
    "body": [
      "const theme = useTheme()",
    ]
  },
  "translation": {
    "prefix": "utr",
    "body": [
      "const { t } = useTranslation()",
    ]
  },
}